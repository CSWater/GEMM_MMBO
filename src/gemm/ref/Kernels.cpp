/*******************************************************************************
* Copyright (C) 2016 Advanced Micro Devices, Inc. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell cop-
* ies of the Software, and to permit persons to whom the Software is furnished
* to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IM-
* PLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNE-
* CTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*******************************************************************************/

/**************************************************
* This file was generated by Tensile:             *
* https://github.com/ROCmSoftwarePlatform/Tensile *
**************************************************/


#include "Kernels.h"
  /******************************************/
  /* Function Prefix                        */
  /******************************************/

/* tile parameters */
#define NUM_THREADS 128
#define SG0I 16
#define SG1J 8
#define TT0I 6
#define TT1J 4
#define MT0I (SG0I*TT0I)  //96
#define MT1J (SG1J*TT1J)  //32
#define VECTOR_WIDTH 2
#define GLOBAL_LOAD_VECTOR_WIDTH_A 2
#define GLOBAL_LOAD_VECTOR_WIDTH_B 2
#define GLOBAL_WRITE_VECTOR_WIDTH 2

/* DepthU parameters*/
#define CPSV (NUM_THREADS / MT0I * VECTOR_WIDTH)
#define LOCAL_SPLITU 1
#define UNROLL 8
#define LOCAL_DEPTHU (LOCAL_SPLITU*UNROLL)

/* other */
#define PAD 0
#define WORK_GROUP_MAPPING 8

/* num loads parallel and perpendicular to coalesced */
#define NLCA 3
#define NLCB 1
#define NLPA 1
#define NLPB 1

/* load sizes parallel and perpendicular to coalesced */
#define LSCA (MT0I/NLCA)      //32
#define LSPA (LOCAL_DEPTHU/NLPA)    //8
#define LSCB (MT1J/NLCB)      //32
#define LSPB (LOCAL_DEPTHU/NLPB)
#define LVCA (LSCA/GLOBAL_LOAD_VECTOR_WIDTH_A) //16
#define LVCB (LSCB/GLOBAL_LOAD_VECTOR_WIDTH_B) //16
#define LVPA (LSPA/GLOBAL_LOAD_VECTOR_WIDTH_A)
#define LVPB (LSPB/GLOBAL_LOAD_VECTOR_WIDTH_B)
#define LDS_OFFSET_B 768
#define LDS_NUM_ELEMENTS 2048
#define LDS_OFFSET_BLK 1024

/* global memory indices */
#define GLOBAL_C(IDX0I, IDX1J, IDXK) (( (IDX0I)*strideC0I + (IDX1J)*strideC1J + (IDXK)*strideCK ))
#define GLOBAL_OFFSET_A(IDX0I, IDXL, IDXK) (( (IDX0I)*strideA0I + (IDXL)*strideAL + (IDXK)*strideAK ))
#define GLOBAL_OFFSET_B(IDX1J, IDXL, IDXK) (( (IDX1J)*strideB1J + (IDXL)*strideBL + (IDXK)*strideBK ))

/* data types */
#define DATA_TYPE double

/* MAC's */
#define MAC(A,B,DST) DST += A*B

#define TYPE_MAC(MULA,MULB,DST) DST = MAC(MULA,MULB,DST);
#define TYPE_MAC_WRITE(DST,ALPHA,REG,BETA) DST = 0 != (BETA) ? (ALPHA)*(REG) + (BETA)*(DST) : (ALPHA)*(REG);

/* 6x4 micro-tile */
#define MAC_6x4\
  TYPE_MAC(rA[0],rB[0],rC[0+0*TT0I]); \
  TYPE_MAC(rA[1],rB[0],rC[1+0*TT0I]); \
  TYPE_MAC(rA[2],rB[0],rC[2+0*TT0I]); \
  TYPE_MAC(rA[3],rB[0],rC[3+0*TT0I]); \
  TYPE_MAC(rA[4],rB[0],rC[4+0*TT0I]); \
  TYPE_MAC(rA[5],rB[0],rC[5+0*TT0I]); \
  TYPE_MAC(rA[0],rB[1],rC[0+1*TT0I]); \
  TYPE_MAC(rA[1],rB[1],rC[1+1*TT0I]); \
  TYPE_MAC(rA[2],rB[1],rC[2+1*TT0I]); \
  TYPE_MAC(rA[3],rB[1],rC[3+1*TT0I]); \
  TYPE_MAC(rA[4],rB[1],rC[4+1*TT0I]); \
  TYPE_MAC(rA[5],rB[1],rC[5+1*TT0I]); \
  TYPE_MAC(rA[0],rB[2],rC[0+2*TT0I]); \
  TYPE_MAC(rA[1],rB[2],rC[1+2*TT0I]); \
  TYPE_MAC(rA[2],rB[2],rC[2+2*TT0I]); \
  TYPE_MAC(rA[3],rB[2],rC[3+2*TT0I]); \
  TYPE_MAC(rA[4],rB[2],rC[4+2*TT0I]); \
  TYPE_MAC(rA[5],rB[2],rC[5+2*TT0I]); \
  TYPE_MAC(rA[0],rB[3],rC[0+3*TT0I]); \
  TYPE_MAC(rA[1],rB[3],rC[1+3*TT0I]); \
  TYPE_MAC(rA[2],rB[3],rC[2+3*TT0I]); \
  TYPE_MAC(rA[3],rB[3],rC[3+3*TT0I]); \
  TYPE_MAC(rA[4],rB[3],rC[4+3*TT0I]); \
  TYPE_MAC(rA[5],rB[3],rC[5+3*TT0I]); \

#define MAC_6x4_BLK\
  TYPE_MAC(rA[0+TT0I],rB[0+TT1J],rC[0+0*TT0I]); \
  TYPE_MAC(rA[1+TT0I],rB[0+TT1J],rC[1+0*TT0I]); \
  TYPE_MAC(rA[2+TT0I],rB[0+TT1J],rC[2+0*TT0I]); \
  TYPE_MAC(rA[3+TT0I],rB[0+TT1J],rC[3+0*TT0I]); \
  TYPE_MAC(rA[4+TT0I],rB[0+TT1J],rC[4+0*TT0I]); \
  TYPE_MAC(rA[5+TT0I],rB[0+TT1J],rC[5+0*TT0I]); \
  TYPE_MAC(rA[0+TT0I],rB[1+TT1J],rC[0+1*TT0I]); \
  TYPE_MAC(rA[1+TT0I],rB[1+TT1J],rC[1+1*TT0I]); \
  TYPE_MAC(rA[2+TT0I],rB[1+TT1J],rC[2+1*TT0I]); \
  TYPE_MAC(rA[3+TT0I],rB[1+TT1J],rC[3+1*TT0I]); \
  TYPE_MAC(rA[4+TT0I],rB[1+TT1J],rC[4+1*TT0I]); \
  TYPE_MAC(rA[5+TT0I],rB[1+TT1J],rC[5+1*TT0I]); \
  TYPE_MAC(rA[0+TT0I],rB[2+TT1J],rC[0+2*TT0I]); \
  TYPE_MAC(rA[1+TT0I],rB[2+TT1J],rC[1+2*TT0I]); \
  TYPE_MAC(rA[2+TT0I],rB[2+TT1J],rC[2+2*TT0I]); \
  TYPE_MAC(rA[3+TT0I],rB[2+TT1J],rC[3+2*TT0I]); \
  TYPE_MAC(rA[4+TT0I],rB[2+TT1J],rC[4+2*TT0I]); \
  TYPE_MAC(rA[5+TT0I],rB[2+TT1J],rC[5+2*TT0I]); \
  TYPE_MAC(rA[0+TT0I],rB[3+TT1J],rC[0+3*TT0I]); \
  TYPE_MAC(rA[1+TT0I],rB[3+TT1J],rC[1+3*TT0I]); \
  TYPE_MAC(rA[2+TT0I],rB[3+TT1J],rC[2+3*TT0I]); \
  TYPE_MAC(rA[3+TT0I],rB[3+TT1J],rC[3+3*TT0I]); \
  TYPE_MAC(rA[4+TT0I],rB[3+TT1J],rC[4+3*TT0I]); \
  TYPE_MAC(rA[5+TT0I],rB[3+TT1J],rC[5+3*TT0I]); \

/* hard-coded initial strides */
#define strideC0I 1
#define strideA0I 1
#define strideB1J 1

  /******************************************/
  /* Begin Kernel                           */
  /******************************************/
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
extern "C"
__global__ void Cijk_Ailk_Bjlk_DB_MT096x032x08_K1_NLCA03_NLCB01_TT06_04_WG16_08_01(
  double *C,
  double const * __restrict__ A,
  double const * __restrict__ B,
  double const alpha,
  double const beta,
  unsigned int const offsetC,
  unsigned int const offsetA,
  unsigned int const offsetB,
  unsigned int const strideC1J,
  unsigned int const strideCK,
  unsigned int const strideAL,
  unsigned int const strideAK,
  unsigned int const strideBL,
  unsigned int const strideBK,
  unsigned int const size0I,
  unsigned int const size1J,
  unsigned int const sizeK,
  unsigned int const sizeL )
#pragma clang diagnostic pop
 {

  /******************************************/
  /* Allocate Resources                     */
  /******************************************/
#define SCALAR_ZERO (double)(0)
  DATA_TYPE rA[TT0I*2];     //TT0I=6
  DATA_TYPE rB[TT1J*2];     //TT1J=4

  /* registers for global->local */
  DATA_TYPE a_0_0_0_0;
  DATA_TYPE a_0_1_0_0;
  DATA_TYPE a_1_0_0_0;
  DATA_TYPE a_1_1_0_0;
  DATA_TYPE a_2_0_0_0;
  DATA_TYPE a_2_1_0_0;
  DATA_TYPE b_0_0_0_0;
  DATA_TYPE b_0_1_0_0;

  /* allocate local memory */
  __shared__ DATA_TYPE localMemory[LDS_NUM_ELEMENTS]; //LDS_NUM_ELEMENTS=2048

  /******************************************/
  /* Global Read Addresses                  */
  /******************************************/

  /* global read addresses: subgroup */
  unsigned int serial = hc_get_workitem_id(0);
  unsigned int sgId = serial / (SG0I*SG1J);

  /* global read addresses: work-group */
  unsigned int wg0I = hc_get_group_id(0);
  unsigned int wg1J = hc_get_group_id(1);
  unsigned int nwg0I = hc_get_num_groups(0);
  unsigned int nwg1J = hc_get_num_groups(1);

  uint64_t wgSerial = wg0I + (wg1J % WORK_GROUP_MAPPING) * nwg0I;  // within block
  unsigned int block = wg1J / WORK_GROUP_MAPPING;
  unsigned int blockRemainder = (wg1J < nwg1J-(nwg1J % WORK_GROUP_MAPPING) ) ? 0 : nwg1J % WORK_GROUP_MAPPING;
  if ( blockRemainder == 0) {
    wg0I = wgSerial / 8;
    wg1J = wgSerial % 8 + block*WORK_GROUP_MAPPING;
  } else if ( blockRemainder == 1) {
    wg0I = wgSerial / 1;
    wg1J = wgSerial % 1 + block*WORK_GROUP_MAPPING;
  } else if ( blockRemainder == 2) {
    wg0I = wgSerial / 2;
    wg1J = wgSerial % 2 + block*WORK_GROUP_MAPPING;
  } else if ( blockRemainder == 3) {
    wg0I = wgSerial / 3;
    wg1J = wgSerial % 3 + block*WORK_GROUP_MAPPING;
  } else if ( blockRemainder == 4) {
    wg0I = wgSerial / 4;
    wg1J = wgSerial % 4 + block*WORK_GROUP_MAPPING;
  } else if ( blockRemainder == 5) {
    wg0I = wgSerial / 5;
    wg1J = wgSerial % 5 + block*WORK_GROUP_MAPPING;
  } else if ( blockRemainder == 6) {
    wg0I = wgSerial / 6;
    wg1J = wgSerial % 6 + block*WORK_GROUP_MAPPING;
  } else {
    wg0I = wgSerial / 7;
    wg1J = wgSerial % 7 + block*WORK_GROUP_MAPPING;
  }

  /* global read addresses: tile offset assignment a */
  //(serial % 16)*2 +  wg0I * MT0I
  unsigned int globalReadOffsetA0I = (serial%LVCA)*GLOBAL_LOAD_VECTOR_WIDTH_A + (wg0I)*MT0I;

  /* global read addresses: tile offset assignment b */
  //(serial % 16)*2 + wg1J * MT1J
  unsigned int globalReadOffsetB1J = (serial%LVCB)*GLOBAL_LOAD_VECTOR_WIDTH_B + (wg1J)*MT1J;

  /* global read addresses: unroll assignment a */
  //serial / 16
  unsigned int globalReadOffsetAL = (serial/LVCA);

  /* global read addresses: unroll assignment b */
  unsigned int globalReadOffsetBL = (serial/LVCB);

  /* global read addresses: other free assignments */
  unsigned int wgK = ( hc_get_group_id(2) ) % sizeK;

  /* global read addresses: tile offsets a */
  //LSCA=32
  unsigned int globalReadOffsetA0I_0_0 = globalReadOffsetA0I + 0 + 0*LSCA;
  unsigned int globalReadOffsetA0I_1_0 = globalReadOffsetA0I + 0 + 1*LSCA;
  unsigned int globalReadOffsetA0I_2_0 = globalReadOffsetA0I + 0 + 2*LSCA;

  /* global read addresses: tile offsets b */
  unsigned int globalReadOffsetB1J_0_0 = globalReadOffsetB1J + 0 + 0*LSCB;

  /* global read addresses: unroll offsets a */
  unsigned int globalReadOffsetAL_0_0 = globalReadOffsetAL + 0 + 0*LSPA;

  /* global read addresses: unroll offsets b */
  unsigned int globalReadOffsetBL_0_0 = globalReadOffsetBL + 0 + 0*LSPB;

  /* global read addresses: shift a */
  globalReadOffsetA0I_0_0 = (  globalReadOffsetA0I_0_0 > size0I-GLOBAL_LOAD_VECTOR_WIDTH_A+0) ? size0I-GLOBAL_LOAD_VECTOR_WIDTH_A+0 : globalReadOffsetA0I_0_0;
  globalReadOffsetA0I_1_0 = (  globalReadOffsetA0I_1_0 > size0I-GLOBAL_LOAD_VECTOR_WIDTH_A+0) ? size0I-GLOBAL_LOAD_VECTOR_WIDTH_A+0 : globalReadOffsetA0I_1_0;
  globalReadOffsetA0I_2_0 = (  globalReadOffsetA0I_2_0 > size0I-GLOBAL_LOAD_VECTOR_WIDTH_A+0) ? size0I-GLOBAL_LOAD_VECTOR_WIDTH_A+0 : globalReadOffsetA0I_2_0;

  /* global read addresses: shift b */
  globalReadOffsetB1J_0_0 = (  globalReadOffsetB1J_0_0 > size1J-GLOBAL_LOAD_VECTOR_WIDTH_B+0) ? size1J-GLOBAL_LOAD_VECTOR_WIDTH_B+0 : globalReadOffsetB1J_0_0;

  /* global read addresses: final offsets a */
  uint64_t globalReadOffsetA_0_0_0_0 = GLOBAL_OFFSET_A( globalReadOffsetA0I_0_0, globalReadOffsetAL_0_0, wgK );
  uint64_t globalReadOffsetA_1_0_0_0 = GLOBAL_OFFSET_A( globalReadOffsetA0I_1_0, globalReadOffsetAL_0_0, wgK );
  uint64_t globalReadOffsetA_2_0_0_0 = GLOBAL_OFFSET_A( globalReadOffsetA0I_2_0, globalReadOffsetAL_0_0, wgK );

  /* global read addresses: final offsets b */
  uint64_t globalReadOffsetB_0_0_0_0 = GLOBAL_OFFSET_B( globalReadOffsetB1J_0_0, globalReadOffsetBL_0_0, wgK );

  /* global read addresses: apply user offsets */
  C += offsetC;
  A += offsetA;
  B += offsetB;

  /* global read addresses: addresses a */
  DATA_TYPE const *globalReadA_0_0_0_0 = A + globalReadOffsetA_0_0_0_0;
  DATA_TYPE const *globalReadA_1_0_0_0 = A + globalReadOffsetA_1_0_0_0;
  DATA_TYPE const *globalReadA_2_0_0_0 = A + globalReadOffsetA_2_0_0_0;

  /* global read addresses: addresses b */
  DATA_TYPE const *globalReadB_0_0_0_0 = B + globalReadOffsetB_0_0_0_0;

  /* global read addresses: increments a */
  int64_t globalReadIncAL = (int64_t)strideAL*LOCAL_DEPTHU;

  /* global read addresses: increments b */
  int64_t globalReadIncBL = (int64_t)strideBL*LOCAL_DEPTHU;

  /******************************************/
  /* Local Write Addresses                  */
  /******************************************/

  /* local write addresses: tile assignment a */
  unsigned int lwA0I = (serial%LVCA)*GLOBAL_LOAD_VECTOR_WIDTH_A;

  /* local write addresses: tile assignment b */
  unsigned int lwB1J = (serial%LVCB)*GLOBAL_LOAD_VECTOR_WIDTH_B;

  /* local write addresses: unroll assignment a */
  unsigned int lwAL = (serial/LVCA);

  /* local write addresses: unroll assignment b */
  unsigned int lwBL = (serial/LVCB);

  /* local write addresses: first offset a */
  unsigned int localWriteFirstOffsetA = lwA0I + lwAL*(MT0I+PAD);

  /* local write addresses: first offset b */
  unsigned int localWriteFirstOffsetB = lwB1J + lwBL*(MT1J+PAD) + LDS_OFFSET_B;

  /* local write addresses: final offsets a */
  unsigned int localWriteOffsetA_0_0_0_0 = localWriteFirstOffsetA + (0 + 0*LSCA) + (0 + 0*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_1_0_0_0 = localWriteFirstOffsetA + (0 + 1*LSCA) + (0 + 0*LSPA)*(MT0I+PAD);
  unsigned int localWriteOffsetA_2_0_0_0 = localWriteFirstOffsetA + (0 + 2*LSCA) + (0 + 0*LSPA)*(MT0I+PAD);

  /* local write addresses: final offsets b */
  unsigned int localWriteOffsetB_0_0_0_0 = localWriteFirstOffsetB + (0 + 0*LSCB) + (0 + 0*LSPB)*(MT1J+PAD);

  /* local write addresses: declare addresses a */
  DATA_TYPE *localWriteA_0_0_0_0;
  DATA_TYPE *localWriteA_1_0_0_0;
  DATA_TYPE *localWriteA_2_0_0_0;

  /* local write addresses: declare addresses b */
  DATA_TYPE *localWriteB_0_0_0_0;

  /* local write addresses: init pointers a */
  localWriteA_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_0_0);
  localWriteA_1_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_1_0_0_0);
  localWriteA_2_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_2_0_0_0);

  /* local write addresses: init pointers b */
  localWriteB_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_0);

  /******************************************/
  /* Local Read Addresses                   */
  /******************************************/

  /* local read addresses: tile assignments a */
  unsigned int lr0I = (serial % SG0I);

  /* local read addresses: tile assignments b */
  unsigned int lr1J = (serial / SG0I) % SG1J;

  /* local read addresses: final offsets a */
  unsigned int localReadOffsetA = lr0I*VECTOR_WIDTH + sgId*(MT0I+PAD);    //sgId=0

  /* local read addresses: final offsets b */
  unsigned int localReadOffsetB = lr1J*VECTOR_WIDTH + sgId*(MT1J+PAD) + LDS_OFFSET_B;

  /* local read addresses: declare addresses a */
  DATA_TYPE *localReadA;

  /* local read addresses: declare addresses b */
  DATA_TYPE *localReadB;

  /* declare loop num iterations */
  unsigned int numIterL;

  /* registers for MAC's */
  DATA_TYPE rC[TT0I*TT1J];
  rC[0] = SCALAR_ZERO;
  rC[1] = SCALAR_ZERO;
  rC[2] = SCALAR_ZERO;
  rC[3] = SCALAR_ZERO;
  rC[4] = SCALAR_ZERO;
  rC[5] = SCALAR_ZERO;
  rC[6] = SCALAR_ZERO;
  rC[7] = SCALAR_ZERO;
  rC[8] = SCALAR_ZERO;
  rC[9] = SCALAR_ZERO;
  rC[10] = SCALAR_ZERO;
  rC[11] = SCALAR_ZERO;
  rC[12] = SCALAR_ZERO;
  rC[13] = SCALAR_ZERO;
  rC[14] = SCALAR_ZERO;
  rC[15] = SCALAR_ZERO;
  rC[16] = SCALAR_ZERO;
  rC[17] = SCALAR_ZERO;
  rC[18] = SCALAR_ZERO;
  rC[19] = SCALAR_ZERO;
  rC[20] = SCALAR_ZERO;
  rC[21] = SCALAR_ZERO;
  rC[22] = SCALAR_ZERO;
  rC[23] = SCALAR_ZERO;
  numIterL = sizeL / LOCAL_DEPTHU;

  /* local read addresses: init pointers a */
  localReadA = (DATA_TYPE *)(localMemory + localReadOffsetA);

  /* local read addresses: init pointers b */
  localReadB = (DATA_TYPE *)(localMemory + localReadOffsetB);

  /* prefetch: global -> local */
  if (sizeL >= LOCAL_DEPTHU) {

    /* global read a */
    a_0_0_0_0 = *(globalReadA_0_0_0_0 + 0);
    a_0_1_0_0 = *(globalReadA_0_0_0_0 + 1);
    a_1_0_0_0 = *(globalReadA_1_0_0_0 + 0);
    a_1_1_0_0 = *(globalReadA_1_0_0_0 + 1);
    a_2_0_0_0 = *(globalReadA_2_0_0_0 + 0);
    a_2_1_0_0 = *(globalReadA_2_0_0_0 + 1);

    /* global read b */
    b_0_0_0_0 = *(globalReadB_0_0_0_0 + 0);
    b_0_1_0_0 = *(globalReadB_0_0_0_0 + 1);

    /* global read inc a */
    globalReadA_0_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_0_0) + globalReadIncAL);
    globalReadA_1_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_1_0_0_0) + globalReadIncAL);
    globalReadA_2_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_2_0_0_0) + globalReadIncAL);

    /* global read inc b */
    globalReadB_0_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadB_0_0_0_0) + globalReadIncBL);

    /* local write a */
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
    *(localWriteA_0_0_0_0 + 0) = a_0_0_0_0;
    *(localWriteA_0_0_0_0 + 1) = a_0_1_0_0;
    *(localWriteA_1_0_0_0 + 0) = a_1_0_0_0;
    *(localWriteA_1_0_0_0 + 1) = a_1_1_0_0;
    *(localWriteA_2_0_0_0 + 0) = a_2_0_0_0;
    *(localWriteA_2_0_0_0 + 1) = a_2_1_0_0;
#pragma clang diagnostic pop

    /* local write b */
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
    *(localWriteB_0_0_0_0 + 0) = b_0_0_0_0;
    *(localWriteB_0_0_0_0 + 1) = b_0_1_0_0;
#pragma clang diagnostic pop

    /* local write swap a */
    localWriteOffsetA_0_0_0_0 = (localWriteOffsetA_0_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_1_0_0_0 = (localWriteOffsetA_1_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_2_0_0_0 = (localWriteOffsetA_2_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);

    /* local write swap b */
    localWriteOffsetB_0_0_0_0 = (localWriteOffsetB_0_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);

    /* local write init pointers a */
    localWriteA_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_0_0);
    localWriteA_1_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_1_0_0_0);
    localWriteA_2_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_2_0_0_0);

    /* local write init pointers b */
    localWriteB_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_0);
    __syncthreads(); //

    /* local read prefetch a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 
    rA[2*VECTOR_WIDTH+0] = localReadA[2*SG0I*VECTOR_WIDTH + 0]; 
    rA[2*VECTOR_WIDTH+1] = localReadA[2*SG0I*VECTOR_WIDTH + 1]; 

    /* local read prefetch b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 

    /* local read inc a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD); //LOCAL_SPLITU=1

    /* local read inc b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD); //LOCAL_SPLITU=1
  }

  /******************************************/
  /* Unrolled Loop(s) - Begin               */
  /******************************************/
  while (numIterL-- > 1) {

    /******************************************/
    /* Unroll Loop 1/1 - Begin                */
    /******************************************/

    /* global read a */
    a_0_0_0_0 = *(globalReadA_0_0_0_0 + 0);
    a_0_1_0_0 = *(globalReadA_0_0_0_0 + 1);
    a_1_0_0_0 = *(globalReadA_1_0_0_0 + 0);
    a_1_1_0_0 = *(globalReadA_1_0_0_0 + 1);
    a_2_0_0_0 = *(globalReadA_2_0_0_0 + 0);
    a_2_1_0_0 = *(globalReadA_2_0_0_0 + 1);

    /* global read b */
    b_0_0_0_0 = *(globalReadB_0_0_0_0 + 0);
    b_0_1_0_0 = *(globalReadB_0_0_0_0 + 1);

    /* global read inc a */
    globalReadA_0_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_0_0_0_0) + globalReadIncAL);
    globalReadA_1_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_1_0_0_0) + globalReadIncAL);
    globalReadA_2_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadA_2_0_0_0) + globalReadIncAL);

    /* global read inc b */
    globalReadB_0_0_0_0 = (DATA_TYPE const *)( ((DATA_TYPE const *)globalReadB_0_0_0_0) + globalReadIncBL);

    /* iter 0 */

    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 
    rA[2*VECTOR_WIDTH+0+TT0I] = localReadA[2*SG0I*VECTOR_WIDTH + 0]; 
    rA[2*VECTOR_WIDTH+1+TT0I] = localReadA[2*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_6x4

    /* iter 1 */

    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 
    rA[2*VECTOR_WIDTH+0] = localReadA[2*SG0I*VECTOR_WIDTH + 0]; 
    rA[2*VECTOR_WIDTH+1] = localReadA[2*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_6x4_BLK

    /* iter 2 */

    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 
    rA[2*VECTOR_WIDTH+0+TT0I] = localReadA[2*SG0I*VECTOR_WIDTH + 0]; 
    rA[2*VECTOR_WIDTH+1+TT0I] = localReadA[2*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_6x4

    /* iter 3 */

    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 
    rA[2*VECTOR_WIDTH+0] = localReadA[2*SG0I*VECTOR_WIDTH + 0]; 
    rA[2*VECTOR_WIDTH+1] = localReadA[2*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_6x4_BLK

    /* iter 4 */

    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 
    rA[2*VECTOR_WIDTH+0+TT0I] = localReadA[2*SG0I*VECTOR_WIDTH + 0]; 
    rA[2*VECTOR_WIDTH+1+TT0I] = localReadA[2*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_6x4

    /* iter 5 */

    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 
    rA[2*VECTOR_WIDTH+0] = localReadA[2*SG0I*VECTOR_WIDTH + 0]; 
    rA[2*VECTOR_WIDTH+1] = localReadA[2*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 

    /* local read increment a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read increment b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_6x4_BLK

    /* iter 6 (swap local pointers iteration) */

    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 
    rA[2*VECTOR_WIDTH+0+TT0I] = localReadA[2*SG0I*VECTOR_WIDTH + 0]; 
    rA[2*VECTOR_WIDTH+1+TT0I] = localReadA[2*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 

    /* local write a */
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
    *(localWriteA_0_0_0_0 + 0) = a_0_0_0_0;
    *(localWriteA_0_0_0_0 + 1) = a_0_1_0_0;
    *(localWriteA_1_0_0_0 + 0) = a_1_0_0_0;
    *(localWriteA_1_0_0_0 + 1) = a_1_1_0_0;
    *(localWriteA_2_0_0_0 + 0) = a_2_0_0_0;
    *(localWriteA_2_0_0_0 + 1) = a_2_1_0_0;
#pragma clang diagnostic pop

    /* local write b */
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
    *(localWriteB_0_0_0_0 + 0) = b_0_0_0_0;
    *(localWriteB_0_0_0_0 + 1) = b_0_1_0_0;
#pragma clang diagnostic pop

    /* local write swap offsets a */
    localWriteOffsetA_0_0_0_0 = (localWriteOffsetA_0_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_1_0_0_0 = (localWriteOffsetA_1_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);
    localWriteOffsetA_2_0_0_0 = (localWriteOffsetA_2_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);

    /* local write swap offsets b */
    localWriteOffsetB_0_0_0_0 = (localWriteOffsetB_0_0_0_0 + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);

    /* local write init pointers a */
    localWriteA_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_0_0);
    localWriteA_1_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_1_0_0_0);
    localWriteA_2_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_2_0_0_0);

    /* local write init pointers b */
    localWriteB_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_0);

    /* local read swap offsets a */
    localReadOffsetA = (localReadOffsetA + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);

    /* local read swap offsets b */
    localReadOffsetB = (localReadOffsetB + LDS_OFFSET_BLK)%(LDS_OFFSET_BLK*2);

    /* local read init pointers a */
    localReadA = (DATA_TYPE *)(localMemory + localReadOffsetA);

    /* local read init pointers b */
    localReadB = (DATA_TYPE *)(localMemory + localReadOffsetB);
    MAC_6x4

    /* iter 7 (last) */
    __syncthreads(); //

    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 
    rA[2*VECTOR_WIDTH+0] = localReadA[2*SG0I*VECTOR_WIDTH + 0]; 
    rA[2*VECTOR_WIDTH+1] = localReadA[2*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 

    /* local read inc a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read inc b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_6x4_BLK

    /******************************************/
    /* Unrolled Loop - End                    */
    /******************************************/
  }

  /* prefetch: last unrolled iteration */
  if (sizeL >= LOCAL_DEPTHU) {

    /* iter 0 */

    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 
    rA[2*VECTOR_WIDTH+0+TT0I] = localReadA[2*SG0I*VECTOR_WIDTH + 0]; 
    rA[2*VECTOR_WIDTH+1+TT0I] = localReadA[2*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 

    /* local read inc a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read inc b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_6x4

    /* iter 1 */

    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 
    rA[2*VECTOR_WIDTH+0] = localReadA[2*SG0I*VECTOR_WIDTH + 0]; 
    rA[2*VECTOR_WIDTH+1] = localReadA[2*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 

    /* local read inc a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read inc b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_6x4_BLK

    /* iter 2 */

    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 
    rA[2*VECTOR_WIDTH+0+TT0I] = localReadA[2*SG0I*VECTOR_WIDTH + 0]; 
    rA[2*VECTOR_WIDTH+1+TT0I] = localReadA[2*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 

    /* local read inc a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read inc b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_6x4

    /* iter 3 */

    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 
    rA[2*VECTOR_WIDTH+0] = localReadA[2*SG0I*VECTOR_WIDTH + 0]; 
    rA[2*VECTOR_WIDTH+1] = localReadA[2*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 

    /* local read inc a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read inc b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_6x4_BLK

    /* iter 4 */

    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 
    rA[2*VECTOR_WIDTH+0+TT0I] = localReadA[2*SG0I*VECTOR_WIDTH + 0]; 
    rA[2*VECTOR_WIDTH+1+TT0I] = localReadA[2*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 

    /* local read inc a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read inc b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_6x4

    /* iter 5 */

    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 
    rA[2*VECTOR_WIDTH+0] = localReadA[2*SG0I*VECTOR_WIDTH + 0]; 
    rA[2*VECTOR_WIDTH+1] = localReadA[2*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 

    /* local read inc a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read inc b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_6x4_BLK

    /* iter 6 */

    /* local read a */
    rA[0*VECTOR_WIDTH+0+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1+TT0I] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1+TT0I] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 
    rA[2*VECTOR_WIDTH+0+TT0I] = localReadA[2*SG0I*VECTOR_WIDTH + 0]; 
    rA[2*VECTOR_WIDTH+1+TT0I] = localReadA[2*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1+TT1J] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1+TT1J] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 

    /* local read inc a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read inc b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_6x4

    /* iter 7 */
    MAC_6x4_BLK
  }

  /******************************************/
  /* Tail Loop                              */
  /******************************************/

  /* local write reset offsets a */
  localWriteOffsetA_0_0_0_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_1_0_0_0 %= LDS_OFFSET_BLK;
  localWriteOffsetA_2_0_0_0 %= LDS_OFFSET_BLK;

  /* local write reset offsets b */
  localWriteOffsetB_0_0_0_0 %= LDS_OFFSET_BLK;
  numIterL = (((sizeL % LOCAL_DEPTHU) + LOCAL_SPLITU - 1) / LOCAL_SPLITU);

  /* global read a */
  a_0_0_0_0 = ( globalReadOffsetAL_0_0 + 0 >= (sizeL % LOCAL_DEPTHU) ) ? SCALAR_ZERO : *(globalReadA_0_0_0_0 + 0);
  a_0_1_0_0 = ( globalReadOffsetAL_0_0 + 0 >= (sizeL % LOCAL_DEPTHU) ) ? SCALAR_ZERO : *(globalReadA_0_0_0_0 + 1);
  a_1_0_0_0 = ( globalReadOffsetAL_0_0 + 0 >= (sizeL % LOCAL_DEPTHU) ) ? SCALAR_ZERO : *(globalReadA_1_0_0_0 + 0);
  a_1_1_0_0 = ( globalReadOffsetAL_0_0 + 0 >= (sizeL % LOCAL_DEPTHU) ) ? SCALAR_ZERO : *(globalReadA_1_0_0_0 + 1);
  a_2_0_0_0 = ( globalReadOffsetAL_0_0 + 0 >= (sizeL % LOCAL_DEPTHU) ) ? SCALAR_ZERO : *(globalReadA_2_0_0_0 + 0);
  a_2_1_0_0 = ( globalReadOffsetAL_0_0 + 0 >= (sizeL % LOCAL_DEPTHU) ) ? SCALAR_ZERO : *(globalReadA_2_0_0_0 + 1);

  /* global read b */
  b_0_0_0_0 = ( globalReadOffsetBL_0_0 + 0 >= (sizeL % LOCAL_DEPTHU) ) ? SCALAR_ZERO : *(globalReadB_0_0_0_0 + 0);
  b_0_1_0_0 = ( globalReadOffsetBL_0_0 + 0 >= (sizeL % LOCAL_DEPTHU) ) ? SCALAR_ZERO : *(globalReadB_0_0_0_0 + 1);
  __syncthreads(); //

  /* local write init pointers a */
  localWriteA_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_0_0_0_0);
  localWriteA_1_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_1_0_0_0);
  localWriteA_2_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetA_2_0_0_0);

  /* local write init pointers b */
  localWriteB_0_0_0_0 = (DATA_TYPE *)(localMemory + localWriteOffsetB_0_0_0_0);

  /* local write a */
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
  *(localWriteA_0_0_0_0 + 0) = a_0_0_0_0;
  *(localWriteA_0_0_0_0 + 1) = a_0_1_0_0;
  *(localWriteA_1_0_0_0 + 0) = a_1_0_0_0;
  *(localWriteA_1_0_0_0 + 1) = a_1_1_0_0;
  *(localWriteA_2_0_0_0 + 0) = a_2_0_0_0;
  *(localWriteA_2_0_0_0 + 1) = a_2_1_0_0;
#pragma clang diagnostic pop

  /* local write b */
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconditional-uninitialized"
  *(localWriteB_0_0_0_0 + 0) = b_0_0_0_0;
  *(localWriteB_0_0_0_0 + 1) = b_0_1_0_0;
#pragma clang diagnostic pop
  __syncthreads(); //

  /* local read reset offsets a */
  localReadOffsetA %= LDS_OFFSET_BLK;

  /* local read reset offsets b */
  localReadOffsetB %= LDS_OFFSET_BLK;

  /* local read init pointers a */
  localReadA = (DATA_TYPE *)(localMemory + localReadOffsetA);

  /* local read init pointers b */
  localReadB = (DATA_TYPE *)(localMemory + localReadOffsetB);

  /* tail loop: macs */
  while (numIterL-- > 0) {

    /* local read a */
    rA[0*VECTOR_WIDTH+0] = localReadA[0*SG0I*VECTOR_WIDTH + 0]; 
    rA[0*VECTOR_WIDTH+1] = localReadA[0*SG0I*VECTOR_WIDTH + 1]; 
    rA[1*VECTOR_WIDTH+0] = localReadA[1*SG0I*VECTOR_WIDTH + 0]; 
    rA[1*VECTOR_WIDTH+1] = localReadA[1*SG0I*VECTOR_WIDTH + 1]; 
    rA[2*VECTOR_WIDTH+0] = localReadA[2*SG0I*VECTOR_WIDTH + 0]; 
    rA[2*VECTOR_WIDTH+1] = localReadA[2*SG0I*VECTOR_WIDTH + 1]; 

    /* local read b */
    rB[0*VECTOR_WIDTH+0] = localReadB[0*SG1J*VECTOR_WIDTH + 0]; 
    rB[0*VECTOR_WIDTH+1] = localReadB[0*SG1J*VECTOR_WIDTH + 1]; 
    rB[1*VECTOR_WIDTH+0] = localReadB[1*SG1J*VECTOR_WIDTH + 0]; 
    rB[1*VECTOR_WIDTH+1] = localReadB[1*SG1J*VECTOR_WIDTH + 1]; 

    /* local read inc a */
    localReadA += LOCAL_SPLITU*(MT0I+PAD);

    /* local read inc b */
    localReadB += LOCAL_SPLITU*(MT1J+PAD);
    MAC_6x4
  }

  /* shift vector components d0 */
  unsigned int wgMT0I = size0I - wg0I*MT0I;
  if (wgMT0I > MT0I) wgMT0I = MT0I;
  unsigned int r0I = wgMT0I % GLOBAL_LOAD_VECTOR_WIDTH_A;//should be 0 if size0I can be divided by MT0I
  if (r0I > 0 && ((wgMT0I/VECTOR_WIDTH) % SG0I) == (serial % SG0I) ) {
    unsigned int s0I = (wgMT0I%VECTOR_WIDTH)/GLOBAL_LOAD_VECTOR_WIDTH_A + (wgMT0I/(SG0I*VECTOR_WIDTH))*(VECTOR_WIDTH/GLOBAL_LOAD_VECTOR_WIDTH_A);
    if (r0I == 1) {
      if (s0I == 0) {
        rC[0 + 0*GLOBAL_LOAD_VECTOR_WIDTH_A + 0*TT0I] = rC[1 + 0*GLOBAL_LOAD_VECTOR_WIDTH_A + 0*TT0I];
        rC[0 + 0*GLOBAL_LOAD_VECTOR_WIDTH_A + 1*TT0I] = rC[1 + 0*GLOBAL_LOAD_VECTOR_WIDTH_A + 1*TT0I];
        rC[0 + 0*GLOBAL_LOAD_VECTOR_WIDTH_A + 2*TT0I] = rC[1 + 0*GLOBAL_LOAD_VECTOR_WIDTH_A + 2*TT0I];
        rC[0 + 0*GLOBAL_LOAD_VECTOR_WIDTH_A + 3*TT0I] = rC[1 + 0*GLOBAL_LOAD_VECTOR_WIDTH_A + 3*TT0I];
      } else if (s0I == 1) {
        rC[0 + 1*GLOBAL_LOAD_VECTOR_WIDTH_A + 0*TT0I] = rC[1 + 1*GLOBAL_LOAD_VECTOR_WIDTH_A + 0*TT0I];
        rC[0 + 1*GLOBAL_LOAD_VECTOR_WIDTH_A + 1*TT0I] = rC[1 + 1*GLOBAL_LOAD_VECTOR_WIDTH_A + 1*TT0I];
        rC[0 + 1*GLOBAL_LOAD_VECTOR_WIDTH_A + 2*TT0I] = rC[1 + 1*GLOBAL_LOAD_VECTOR_WIDTH_A + 2*TT0I];
        rC[0 + 1*GLOBAL_LOAD_VECTOR_WIDTH_A + 3*TT0I] = rC[1 + 1*GLOBAL_LOAD_VECTOR_WIDTH_A + 3*TT0I];
      } else {
        rC[0 + 2*GLOBAL_LOAD_VECTOR_WIDTH_A + 0*TT0I] = rC[1 + 2*GLOBAL_LOAD_VECTOR_WIDTH_A + 0*TT0I];
        rC[0 + 2*GLOBAL_LOAD_VECTOR_WIDTH_A + 1*TT0I] = rC[1 + 2*GLOBAL_LOAD_VECTOR_WIDTH_A + 1*TT0I];
        rC[0 + 2*GLOBAL_LOAD_VECTOR_WIDTH_A + 2*TT0I] = rC[1 + 2*GLOBAL_LOAD_VECTOR_WIDTH_A + 2*TT0I];
        rC[0 + 2*GLOBAL_LOAD_VECTOR_WIDTH_A + 3*TT0I] = rC[1 + 2*GLOBAL_LOAD_VECTOR_WIDTH_A + 3*TT0I];
      }
    }
  }

  /* shift vector components d1 */
  unsigned int wgMT1J = size1J - wg1J*MT1J;
  if (wgMT1J > MT1J) wgMT1J = MT1J;
  unsigned int r1J = wgMT1J % GLOBAL_LOAD_VECTOR_WIDTH_B;//should be 0 if size1J can be divided by MT1J
  if (r1J > 0 && ((wgMT1J/VECTOR_WIDTH) % SG1J) == (serial / SG0I) % SG1J ) {
    unsigned int s1J = (wgMT1J%VECTOR_WIDTH)/GLOBAL_LOAD_VECTOR_WIDTH_B + (wgMT1J/(SG1J*VECTOR_WIDTH))*(VECTOR_WIDTH/GLOBAL_LOAD_VECTOR_WIDTH_B);
    if (r1J == 1) {
      if (s1J == 0) {
        rC[0 + 0*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 0*TT0I] = rC[0 + 0*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 1*TT0I];
        rC[1 + 0*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 0*TT0I] = rC[1 + 0*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 1*TT0I];
        rC[2 + 0*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 0*TT0I] = rC[2 + 0*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 1*TT0I];
        rC[3 + 0*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 0*TT0I] = rC[3 + 0*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 1*TT0I];
        rC[4 + 0*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 0*TT0I] = rC[4 + 0*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 1*TT0I];
        rC[5 + 0*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 0*TT0I] = rC[5 + 0*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 1*TT0I];
      } else {
        rC[0 + 1*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 0*TT0I] = rC[0 + 1*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 1*TT0I];
        rC[1 + 1*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 0*TT0I] = rC[1 + 1*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 1*TT0I];
        rC[2 + 1*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 0*TT0I] = rC[2 + 1*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 1*TT0I];
        rC[3 + 1*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 0*TT0I] = rC[3 + 1*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 1*TT0I];
        rC[4 + 1*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 0*TT0I] = rC[4 + 1*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 1*TT0I];
        rC[5 + 1*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 0*TT0I] = rC[5 + 1*TT0I*GLOBAL_LOAD_VECTOR_WIDTH_B + 1*TT0I];
      }
    }
  }

  /* not-LocalSplitU: global write indices */
  unsigned int globalC0I = (wg0I)*MT0I + (serial % SG0I)*VECTOR_WIDTH;
  unsigned int globalC1J = (wg1J)*MT1J + (serial / SG0I)*VECTOR_WIDTH;
  unsigned int globalCK = (wgK);

  /* not-LocalSplitU: global write */
  if (globalC0I + 0 + 0*SG0I*VECTOR_WIDTH < size0I) {  
    if (globalC1J + 0 + 0*SG1J*VECTOR_WIDTH < size1J) {  
      TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 0 + 0*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 0 + 0*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], 
          alpha, rC[0*VECTOR_WIDTH+0 + (0*VECTOR_WIDTH+0)*TT0I], beta) 
    } 
  }
  if (globalC0I + 1 + 0*SG0I*VECTOR_WIDTH < size0I) {  
    if (globalC1J + 0 + 0*SG1J*VECTOR_WIDTH < size1J) {  
      TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 1 + 0*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 0 + 0*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], 
          alpha, rC[0*VECTOR_WIDTH+1 + (0*VECTOR_WIDTH+0)*TT0I], beta) 
    } 
  }
  if (globalC0I + 0 + 0*SG0I*VECTOR_WIDTH < size0I) {  
    if (globalC1J + 1 + 0*SG1J*VECTOR_WIDTH < size1J) {  
      TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 0 + 0*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 1 + 0*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], 
          alpha, rC[0*VECTOR_WIDTH+0 + (0*VECTOR_WIDTH+1)*TT0I], beta) 
    } 
  }
  if (globalC0I + 1 + 0*SG0I*VECTOR_WIDTH < size0I) {  
    if (globalC1J + 1 + 0*SG1J*VECTOR_WIDTH < size1J) {  
      TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 1 + 0*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 1 + 0*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], 
          alpha, rC[0*VECTOR_WIDTH+1 + (0*VECTOR_WIDTH+1)*TT0I], beta) 
    } 
  }
  if (globalC0I + 0 + 1*SG0I*VECTOR_WIDTH < size0I) {  
    if (globalC1J + 0 + 0*SG1J*VECTOR_WIDTH < size1J) {  
      TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 0 + 1*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 0 + 0*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], 
          alpha, rC[1*VECTOR_WIDTH+0 + (0*VECTOR_WIDTH+0)*TT0I], beta) 
    } 
  }
  if (globalC0I + 1 + 1*SG0I*VECTOR_WIDTH < size0I) {  
    if (globalC1J + 0 + 0*SG1J*VECTOR_WIDTH < size1J) {  TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 1 + 1*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 0 + 0*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], 
        alpha, rC[1*VECTOR_WIDTH+1 + (0*VECTOR_WIDTH+0)*TT0I], beta) 
    } 
  }
  if (globalC0I + 0 + 1*SG0I*VECTOR_WIDTH < size0I) {  
    if (globalC1J + 1 + 0*SG1J*VECTOR_WIDTH < size1J) {  
      TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 0 + 1*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 1 + 0*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], 
          alpha, rC[1*VECTOR_WIDTH+0 + (0*VECTOR_WIDTH+1)*TT0I], beta) 
    } 
  }
  if (globalC0I + 1 + 1*SG0I*VECTOR_WIDTH < size0I) {  if (globalC1J + 1 + 0*SG1J*VECTOR_WIDTH < size1J) {  TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 1 + 1*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 1 + 0*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], alpha, rC[1*VECTOR_WIDTH+1 + (0*VECTOR_WIDTH+1)*TT0I], beta) } }
  if (globalC0I + 0 + 2*SG0I*VECTOR_WIDTH < size0I) {  if (globalC1J + 0 + 0*SG1J*VECTOR_WIDTH < size1J) {  TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 0 + 2*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 0 + 0*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], alpha, rC[2*VECTOR_WIDTH+0 + (0*VECTOR_WIDTH+0)*TT0I], beta) } }
  if (globalC0I + 1 + 2*SG0I*VECTOR_WIDTH < size0I) {  if (globalC1J + 0 + 0*SG1J*VECTOR_WIDTH < size1J) {  TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 1 + 2*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 0 + 0*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], alpha, rC[2*VECTOR_WIDTH+1 + (0*VECTOR_WIDTH+0)*TT0I], beta) } }
  if (globalC0I + 0 + 2*SG0I*VECTOR_WIDTH < size0I) {  if (globalC1J + 1 + 0*SG1J*VECTOR_WIDTH < size1J) {  TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 0 + 2*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 1 + 0*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], alpha, rC[2*VECTOR_WIDTH+0 + (0*VECTOR_WIDTH+1)*TT0I], beta) } }
  if (globalC0I + 1 + 2*SG0I*VECTOR_WIDTH < size0I) {  if (globalC1J + 1 + 0*SG1J*VECTOR_WIDTH < size1J) {  TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 1 + 2*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 1 + 0*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], alpha, rC[2*VECTOR_WIDTH+1 + (0*VECTOR_WIDTH+1)*TT0I], beta) } }
  if (globalC0I + 0 + 0*SG0I*VECTOR_WIDTH < size0I) {  if (globalC1J + 0 + 1*SG1J*VECTOR_WIDTH < size1J) {  TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 0 + 0*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 0 + 1*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], alpha, rC[0*VECTOR_WIDTH+0 + (1*VECTOR_WIDTH+0)*TT0I], beta) } }
  if (globalC0I + 1 + 0*SG0I*VECTOR_WIDTH < size0I) {  if (globalC1J + 0 + 1*SG1J*VECTOR_WIDTH < size1J) {  TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 1 + 0*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 0 + 1*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], alpha, rC[0*VECTOR_WIDTH+1 + (1*VECTOR_WIDTH+0)*TT0I], beta) } }
  if (globalC0I + 0 + 0*SG0I*VECTOR_WIDTH < size0I) {  if (globalC1J + 1 + 1*SG1J*VECTOR_WIDTH < size1J) {  TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 0 + 0*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 1 + 1*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], alpha, rC[0*VECTOR_WIDTH+0 + (1*VECTOR_WIDTH+1)*TT0I], beta) } }
  if (globalC0I + 1 + 0*SG0I*VECTOR_WIDTH < size0I) {  if (globalC1J + 1 + 1*SG1J*VECTOR_WIDTH < size1J) {  TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 1 + 0*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 1 + 1*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], alpha, rC[0*VECTOR_WIDTH+1 + (1*VECTOR_WIDTH+1)*TT0I], beta) } }
  if (globalC0I + 0 + 1*SG0I*VECTOR_WIDTH < size0I) {  if (globalC1J + 0 + 1*SG1J*VECTOR_WIDTH < size1J) {  TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 0 + 1*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 0 + 1*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], alpha, rC[1*VECTOR_WIDTH+0 + (1*VECTOR_WIDTH+0)*TT0I], beta) } }
  if (globalC0I + 1 + 1*SG0I*VECTOR_WIDTH < size0I) {  if (globalC1J + 0 + 1*SG1J*VECTOR_WIDTH < size1J) {  TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 1 + 1*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 0 + 1*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], alpha, rC[1*VECTOR_WIDTH+1 + (1*VECTOR_WIDTH+0)*TT0I], beta) } }
  if (globalC0I + 0 + 1*SG0I*VECTOR_WIDTH < size0I) {  if (globalC1J + 1 + 1*SG1J*VECTOR_WIDTH < size1J) {  TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 0 + 1*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 1 + 1*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], alpha, rC[1*VECTOR_WIDTH+0 + (1*VECTOR_WIDTH+1)*TT0I], beta) } }
  if (globalC0I + 1 + 1*SG0I*VECTOR_WIDTH < size0I) {  if (globalC1J + 1 + 1*SG1J*VECTOR_WIDTH < size1J) {  TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 1 + 1*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 1 + 1*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], alpha, rC[1*VECTOR_WIDTH+1 + (1*VECTOR_WIDTH+1)*TT0I], beta) } }
  if (globalC0I + 0 + 2*SG0I*VECTOR_WIDTH < size0I) {  if (globalC1J + 0 + 1*SG1J*VECTOR_WIDTH < size1J) {  TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 0 + 2*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 0 + 1*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], alpha, rC[2*VECTOR_WIDTH+0 + (1*VECTOR_WIDTH+0)*TT0I], beta) } }
  if (globalC0I + 1 + 2*SG0I*VECTOR_WIDTH < size0I) {  if (globalC1J + 0 + 1*SG1J*VECTOR_WIDTH < size1J) {  TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 1 + 2*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 0 + 1*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], alpha, rC[2*VECTOR_WIDTH+1 + (1*VECTOR_WIDTH+0)*TT0I], beta) } }
  if (globalC0I + 0 + 2*SG0I*VECTOR_WIDTH < size0I) {  if (globalC1J + 1 + 1*SG1J*VECTOR_WIDTH < size1J) {  TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 0 + 2*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 1 + 1*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], alpha, rC[2*VECTOR_WIDTH+0 + (1*VECTOR_WIDTH+1)*TT0I], beta) } }
  if (globalC0I + 1 + 2*SG0I*VECTOR_WIDTH < size0I) {  if (globalC1J + 1 + 1*SG1J*VECTOR_WIDTH < size1J) {  TYPE_MAC_WRITE( C[ GLOBAL_C( (uint64_t) globalC0I + 1 + 2*SG0I*VECTOR_WIDTH, (uint64_t) globalC1J + 1 + 1*SG1J*VECTOR_WIDTH, (uint64_t) globalCK) ], alpha, rC[2*VECTOR_WIDTH+1 + (1*VECTOR_WIDTH+1)*TT0I], beta) } }

}
